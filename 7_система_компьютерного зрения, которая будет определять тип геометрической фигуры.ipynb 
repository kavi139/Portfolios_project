{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d_qXycKuUA51"
      },
      "source": [
        "### Задание"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "aUMmCXubUHEb"
      },
      "source": [
        "Создайте систему компьютерного зрения, которая будет определять тип геометрической фигуры. Используя подготовленную базу и шаблон ноутбука проведите серию экспериментов по перебору гиперпараметров нейронной сети, распознающей три категории изображений (треугольник, круг, квадрат).\n",
        "\n",
        "1. Поменяйте количество нейронов в сети, используя следующие значения:\n",
        "\n",
        "- один слой 10 нейронов\n",
        "- один слой 100 нейронов\n",
        "- один слой 5000 нейронов.\n",
        "\n",
        "2. Поменяйте активационную функцию в скрытых слоях с `relu` на `linear`.\n",
        "3. Поменяйте размеры batch_size:\n",
        "- 10\n",
        "- 100\n",
        "- 1000\n",
        "\n",
        "4. Выведите на экран получившиеся точности."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2zDFM0apy8-R"
      },
      "source": [
        "# Подключение класса для создания нейронной сети прямого распространения\n",
        "from tensorflow.keras.models import Sequential\n",
        "# Подключение класса для создания полносвязного слоя\n",
        "from tensorflow.keras.layers import Dense\n",
        "# Подключение оптимизатора\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "# Подключение утилит для to_categorical\n",
        "from tensorflow.keras import utils\n",
        "# Подключение библиотеки для загрузки изображений\n",
        "from tensorflow.keras.preprocessing import image\n",
        "# Подключение библиотеки для работы с массивами\n",
        "import numpy as np\n",
        "# Подключение библиотек для отрисовки изображений\n",
        "import matplotlib.pyplot as plt\n",
        "# Подключение модуля для работы с файлами\n",
        "import os\n",
        "# Вывод изображения в ноутбуке, а не в консоли или файле\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yK5nGKwvcXKD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "outputId": "2a0d6651-3aee-4066-a469-9ec1e1a72bfe"
      },
      "source": [
        "# Загрузка датасета из облака\n",
        "import gdown\n",
        "gdown.download('https://storage.yandexcloud.net/aiueducation/Content/base/l3/hw_light.zip', None, quiet=True)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'hw_light.zip'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VCcXAah-y1Uy"
      },
      "source": [
        "# Распаковываем архив hw_light.zip в папку hw_light\n",
        "!unzip -q hw_light.zip"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RchbuyUggfIU",
        "outputId": "cf83f4d8-ef5f-46b9-8d6d-6de0e7fcf4f5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6Hp0WpKAzEji",
        "outputId": "9bf73259-d8aa-4692-d58c-8cbf53a9ee2a"
      },
      "source": [
        "# Путь к директории с базой\n",
        "base_dir = '/content/hw_light'\n",
        "# Создание пустого списка для загрузки изображений обучающей выборки\n",
        "x_train = []\n",
        "# Создание списка для меток классов\n",
        "y_train = []\n",
        "# Задание высоты и ширины загружаемых изображений\n",
        "\n",
        "img_height = 20\n",
        "img_width = 20\n",
        "# Перебор папок в директории базы\n",
        "for patch in os.listdir(base_dir):\n",
        "    # Перебор файлов в папках\n",
        "    for img in os.listdir(base_dir + '/' + patch):\n",
        "        # Добавление в список изображений текущей картинки\n",
        "        x_train.append(image.img_to_array(image.load_img(base_dir + '/' + patch + '/' + img,\n",
        "                                                    target_size=(img_height, img_width),\n",
        "                                                    color_mode='grayscale')))\n",
        "        # Добавление в массив меток, соответствующих классам\n",
        "        if patch == '0':\n",
        "            y_train.append(0)\n",
        "        elif patch == '3':\n",
        "            y_train.append(1)\n",
        "        else:\n",
        "            y_train.append(2)\n",
        "\n",
        "# Преобразование в numpy-массив загруженных изображений и меток классов\n",
        "x_train = np.array(x_train)\n",
        "y_train = np.array(y_train)\n",
        "# Вывод размерностей\n",
        "print('Размер массива x_train', x_train.shape)\n",
        "print('Размер массива y_train', y_train.shape)"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Размер массива x_train (302, 20, 20, 1)\n",
            "Размер массива y_train (302,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def create_model(neurons, activation, batch_size):\n",
        "    model = Sequential([\n",
        "        Dense(neurons, input_dim=img_height * img_width, activation=activation),\n",
        "        Dense(3, activation='softmax')\n",
        "    ])\n",
        "    model.compile(loss='categorical_crossentropy', optimizer=Adam(learning_rate=0.001), metrics=['accuracy'])\n",
        "    return model\n",
        "neurons_list = [10, 100, 5000]\n",
        "activation_list = ['relu', 'linear']\n",
        "batch_size_list = [10, 100, 1000]\n",
        "\n",
        "for neurons in neurons_list:\n",
        "    for activation in activation_list:\n",
        "        for batch_size in batch_size_list:\n",
        "            model = create_model(neurons, activation, batch_size)\n",
        "            print(f\"\\nNeurons: {neurons}, Activation: {activation}, Batch Size: {batch_size}\")\n",
        "            history = model.fit(x_train.reshape((-1, img_height * img_width)), utils.to_categorical(y_train, 3),\n",
        "                                epochs=10, batch_size=batch_size, verbose=0)\n",
        "            accuracy = round(history.history['accuracy'][-1], 4)\n",
        "            print('Accuracy:', accuracy)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wst3I1imIQVM",
        "outputId": "8b1a487b-e75d-4e84-dbc2-c18af684c2a7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Neurons: 10, Activation: relu, Batch Size: 10\n",
            "Accuracy: 0.6755\n",
            "\n",
            "Neurons: 10, Activation: relu, Batch Size: 100\n",
            "Accuracy: 0.5464\n",
            "\n",
            "Neurons: 10, Activation: relu, Batch Size: 1000\n",
            "Accuracy: 0.4073\n",
            "\n",
            "Neurons: 10, Activation: linear, Batch Size: 10\n",
            "Accuracy: 0.6921\n",
            "\n",
            "Neurons: 10, Activation: linear, Batch Size: 100\n",
            "Accuracy: 0.5265\n",
            "\n",
            "Neurons: 10, Activation: linear, Batch Size: 1000\n",
            "Accuracy: 0.5099\n",
            "\n",
            "Neurons: 100, Activation: relu, Batch Size: 10\n",
            "Accuracy: 0.8841\n",
            "\n",
            "Neurons: 100, Activation: relu, Batch Size: 100\n",
            "Accuracy: 0.6623\n",
            "\n",
            "Neurons: 100, Activation: relu, Batch Size: 1000\n",
            "Accuracy: 0.6556\n",
            "\n",
            "Neurons: 100, Activation: linear, Batch Size: 10\n",
            "Accuracy: 0.7947\n",
            "\n",
            "Neurons: 100, Activation: linear, Batch Size: 100\n",
            "Accuracy: 0.596\n",
            "\n",
            "Neurons: 100, Activation: linear, Batch Size: 1000\n",
            "Accuracy: 0.5066\n",
            "\n",
            "Neurons: 5000, Activation: relu, Batch Size: 10\n",
            "Accuracy: 0.8907\n",
            "\n",
            "Neurons: 5000, Activation: relu, Batch Size: 100\n",
            "Accuracy: 0.649\n",
            "\n",
            "Neurons: 5000, Activation: relu, Batch Size: 1000\n",
            "Accuracy: 0.4868\n",
            "\n",
            "Neurons: 5000, Activation: linear, Batch Size: 10\n",
            "Accuracy: 0.7185\n",
            "\n",
            "Neurons: 5000, Activation: linear, Batch Size: 100\n",
            "Accuracy: 0.5927\n",
            "\n",
            "Neurons: 5000, Activation: linear, Batch Size: 1000\n",
            "Accuracy: 0.5993\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Ваше решение"
      ],
      "metadata": {
        "id": "PGcSnEujkZSH"
      }
    }
  ]
}